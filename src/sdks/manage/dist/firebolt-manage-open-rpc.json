{
	"openrpc": "1.2.4",
	"info": {
		"title": "Firebolt Manage SDK",
		"version": "0.10.0-next.9",
		"x-interface-names": {
			"xrn:firebolt:capability:lifecycle:state": "StateProvider"
		}
	},
	"methods": [
		{
			"name": "Accessibility.closedCaptionsSettings",
			"summary": "Get the user's preferred closed-captions settings",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"result": {
				"name": "closedCaptionsSettings",
				"summary": "the closed captions settings",
				"schema": {
					"$ref": "#/components/schemas/ClosedCaptionsSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [],
					"result": {
						"name": "settings",
						"value": {
							"enabled": true,
							"styles": {
								"fontFamily": "Monospace sans-serif",
								"fontSize": 1,
								"fontColor": "#ffffff",
								"fontEdge": "none",
								"fontEdgeColor": "#7F7F7F",
								"fontOpacity": 100,
								"backgroundColor": "#000000",
								"backgroundOpacity": 100,
								"textAlign": "center",
								"textAlignVertical": "middle"
							}
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.voiceGuidance",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [],
			"tags": [
				{
					"name": "deprecated",
					"x-alternative": "Accessibility.voiceGuidanceSettings()",
					"x-since": "0.6.0"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"result": {
				"name": "settings",
				"summary": "the voice guidance settings",
				"schema": {
					"$ref": "#/components/schemas/VoiceGuidanceSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true,
							"speed": 5
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.voiceGuidanceSettings",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"result": {
				"name": "settings",
				"summary": "the voice guidance settings",
				"schema": {
					"$ref": "#/components/schemas/VoiceGuidanceSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true,
							"speed": 5
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.onClosedCaptionsSettingsChanged",
			"summary": "Get the user's preferred closed-captions settings",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-alternative": "closedCaptionsSettings"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"result": {
				"name": "closedCaptionsSettings",
				"summary": "the closed captions settings",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/ClosedCaptionsSettings"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "settings",
						"value": {
							"enabled": true,
							"styles": {
								"fontFamily": "Monospace sans-serif",
								"fontSize": 1,
								"fontColor": "#ffffff",
								"fontEdge": "none",
								"fontEdgeColor": "#7F7F7F",
								"fontOpacity": 100,
								"backgroundColor": "#000000",
								"backgroundOpacity": 100,
								"textAlign": "center",
								"textAlignVertical": "middle"
							}
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.onVoiceGuidanceSettingsChanged",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-alternative": "voiceGuidanceSettings"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"result": {
				"name": "settings",
				"summary": "the voice guidance settings",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/VoiceGuidanceSettings"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true,
							"speed": 5
						}
					}
				}
			]
		},
		{
			"name": "Accessory.pair",
			"summary": "Pair an accessory with the device.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessory:pair"
					]
				}
			],
			"params": [
				{
					"name": "type",
					"schema": {
						"$ref": "#/components/schemas/AccessoryType"
					}
				},
				{
					"name": "protocol",
					"schema": {
						"$ref": "#/components/schemas/AccessoryProtocol"
					}
				},
				{
					"name": "timeout",
					"schema": {
						"$ref": "#/components/schemas/AccessoryPairingTimeout"
					}
				}
			],
			"result": {
				"name": "pairedAccessory",
				"summary": "The state of last paired accessory",
				"schema": {
					"$ref": "#/components/schemas/AccessoryInfo"
				}
			},
			"examples": [
				{
					"name": "Pair a Bluetooth Remote",
					"params": [
						{
							"name": "type",
							"value": "Remote"
						},
						{
							"name": "protocol",
							"value": "BluetoothLE"
						},
						{
							"name": "timeout",
							"value": 180
						}
					],
					"result": {
						"name": "Bluetooth Remote successful pairing example",
						"value": {
							"type": "Remote",
							"make": "UEI",
							"model": "PR1",
							"protocol": "BluetoothLE"
						}
					}
				},
				{
					"name": "Pair a Bluetooth Speaker",
					"params": [
						{
							"name": "type",
							"value": "Speaker"
						},
						{
							"name": "protocol",
							"value": "BluetoothLE"
						},
						{
							"name": "timeout",
							"value": 180
						}
					],
					"result": {
						"name": "Bluetooth Speaker successful pairing example",
						"value": {
							"type": "Speaker",
							"make": "Sonos",
							"model": "V120",
							"protocol": "BluetoothLE"
						}
					}
				},
				{
					"name": "Pair a RF Remote",
					"params": [
						{
							"name": "type",
							"value": "Remote"
						},
						{
							"name": "protocol",
							"value": "RF4CE"
						},
						{
							"name": "timeout",
							"value": 180
						}
					],
					"result": {
						"name": "RF Remote successful pairing example",
						"value": {
							"type": "Remote",
							"make": "UEI",
							"model": "15",
							"protocol": "RF4CE"
						}
					}
				}
			]
		},
		{
			"name": "Accessory.list",
			"summary": "Provides a list of Accesories paired to the device.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessory:list"
					]
				}
			],
			"params": [
				{
					"name": "type",
					"schema": {
						"$ref": "#/components/schemas/AccessoryTypeListParam"
					}
				},
				{
					"name": "protocol",
					"summary": "Defines the mechanism by which accessory will connect to the device.",
					"schema": {
						"$ref": "#/components/schemas/AccessoryProtocolListParam"
					}
				}
			],
			"result": {
				"name": "list",
				"summary": "Contains a list of Accesories paired to the device.",
				"schema": {
					"$ref": "#/components/schemas/AccessoryList"
				}
			},
			"examples": [
				{
					"name": "List all Accessories.",
					"params": [
						{
							"name": "type",
							"value": "All"
						},
						{
							"name": "protocol",
							"value": "All"
						}
					],
					"result": {
						"name": "Accessory List example",
						"value": {
							"list": [
								{
									"type": "Remote",
									"make": "uei",
									"model": "PR1",
									"protocol": "BluetoothLE"
								},
								{
									"type": "Speaker",
									"make": "Sonos",
									"model": "V120",
									"protocol": "BluetoothLE"
								}
							]
						}
					}
				},
				{
					"name": "List Bluetooth accessories",
					"params": [
						{
							"name": "type",
							"value": "All"
						},
						{
							"name": "protocol",
							"value": "BluetoothLE"
						}
					],
					"result": {
						"name": "Accessory List example",
						"value": {
							"list": [
								{
									"type": "Remote",
									"make": "uei",
									"model": "PR1",
									"protocol": "BluetoothLE"
								},
								{
									"type": "Speaker",
									"make": "Sonos",
									"model": "V120",
									"protocol": "BluetoothLE"
								}
							]
						}
					}
				},
				{
					"name": "List only Bluetooth Remotes",
					"params": [
						{
							"name": "type",
							"value": "Remote"
						},
						{
							"name": "protocol",
							"value": "BluetoothLE"
						}
					],
					"result": {
						"name": "Accessory List example",
						"value": {
							"list": [
								{
									"type": "Remote",
									"make": "uei",
									"model": "PR1",
									"protocol": "BluetoothLE"
								}
							]
						}
					}
				},
				{
					"name": "List only Bluetooth Speakers",
					"params": [
						{
							"name": "type",
							"value": "Speaker"
						},
						{
							"name": "protocol",
							"value": "BluetoothLE"
						}
					],
					"result": {
						"name": "Accessory List example",
						"value": {
							"list": [
								{
									"type": "Speaker",
									"make": "Sonos",
									"model": "V120",
									"protocol": "BluetoothLE"
								}
							]
						}
					}
				},
				{
					"name": "List only RF Remote",
					"params": [
						{
							"name": "type",
							"value": "Remote"
						},
						{
							"name": "protocol",
							"value": "RF4CE"
						}
					],
					"result": {
						"name": "Accessory List example",
						"value": {
							"list": [
								{
									"type": "Remote",
									"make": "uei",
									"model": "XR15",
									"protocol": "RF4CE"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Account.session",
			"summary": "Used by a distributor to push Session token to firebolt.",
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:token:session"
					]
				}
			],
			"params": [
				{
					"name": "token",
					"schema": {
						"$ref": "#/components/schemas/Token"
					}
				},
				{
					"name": "expiresIn",
					"schema": {
						"$ref": "#/components/schemas/Expiry"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "token",
							"value": "RmlyZWJvbHQgTWFuYWdlIFNESyBSb2NrcyEhIQ=="
						},
						{
							"name": "expiresIn",
							"value": 84000
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "Account.onRequestSession",
			"summary": "Registers as a provider for when device needs a session",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"$ref": "#/components/schemas/Session",
						"examples": [
							{
								"token": "RmlyZWJvbHQgTWFuYWdlIFNESyBSb2NrcyEhIQ==",
								"expiresIn": 84000
							}
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:token:session",
					"x-allow-focus": true
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "session",
				"summary": "The request to get a new session",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "object",
							"properties": {
								"parameters": {
									"const": null
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "abc",
							"parameters": null
						}
					}
				}
			]
		},
		{
			"name": "Account.sessionFocus",
			"summary": "Internal API for Session Provider to request focus for UX purposes.",
			"params": [],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:token:session",
					"x-allow-focus": true,
					"x-allow-focus-for": "onRequestSession"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Account.sessionResponse",
			"summary": "Internal API for Session Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"$ref": "#/components/schemas/Session",
										"examples": [
											{
												"token": "RmlyZWJvbHQgTWFuYWdlIFNESyBSb2NrcyEhIQ==",
												"expiresIn": 84000
											}
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:token:session",
					"x-allow-focus": true,
					"x-response-for": "onRequestSession"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"token": "RmlyZWJvbHQgTWFuYWdlIFNESyBSb2NrcyEhIQ==",
									"expiresIn": 84000
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Account.sessionError",
			"summary": "Internal API for Session Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:token:session",
					"x-allow-focus": true,
					"x-error-for": "onRequestSession"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "AcknowledgeChallenge.onRequestChallenge",
			"summary": "Registers as a provider for when the user should be challenged in order to confirm access to a capability",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"$ref": "#/components/schemas/GrantResult"
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:acknowledgechallenge",
					"x-allow-focus": true
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "challenge",
				"summary": "The request to challenge the user",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/ChallengeProviderRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "abc",
							"parameters": {
								"capability": "xrn:firebolt:capability:localization::postalcode",
								"requestor": {
									"id": "ReferenceApp",
									"name": "Firebolt Reference App"
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "AcknowledgeChallenge.challengeFocus",
			"summary": "Internal API for Challenge Provider to request focus for UX purposes.",
			"params": [],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:acknowledgechallenge",
					"x-allow-focus": true,
					"x-allow-focus-for": "onRequestChallenge"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "AcknowledgeChallenge.challengeResponse",
			"summary": "Internal API for Challenge Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"$ref": "#/components/schemas/GrantResult"
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:acknowledgechallenge",
					"x-allow-focus": true,
					"x-response-for": "onRequestChallenge"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"granted": true
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "AcknowledgeChallenge.challengeError",
			"summary": "Internal API for Challenge Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:acknowledgechallenge",
					"x-allow-focus": true,
					"x-error-for": "onRequestChallenge"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Advertising.resetIdentifier",
			"summary": "Resets a user's identifier in the ad platform so that the advertising id that apps get will be a new value",
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"params": [],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.enabled",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "Whether or not closed-captions are enabled.",
			"params": [],
			"result": {
				"name": "enabled",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "enabled",
						"value": true
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.fontFamily",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font family for displaying closed-captions.",
			"params": [],
			"result": {
				"name": "family",
				"schema": {
					"$ref": "#/components/schemas/FontFamily"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "family",
						"value": "Monospace sans-serif"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.fontSize",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font size for displaying closed-captions.",
			"params": [],
			"result": {
				"name": "size",
				"schema": {
					"$ref": "#/components/schemas/FontSize"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "size",
						"value": 1
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.fontColor",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font color for displaying closed-captions.",
			"params": [],
			"result": {
				"name": "color",
				"schema": {
					"$ref": "#/components/schemas/Color"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "color",
						"value": "#ffffff"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.fontEdge",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font edge style for displaying closed-captions.",
			"params": [],
			"result": {
				"name": "edge",
				"schema": {
					"$ref": "#/components/schemas/FontEdge"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "edge",
						"value": "none"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.fontEdgeColor",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font edge color for displaying closed-captions.",
			"params": [],
			"result": {
				"name": "color",
				"schema": {
					"$ref": "#/components/schemas/Color"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "color",
						"value": "#000000"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.fontOpacity",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered opacity for displaying closed-captions characters.",
			"params": [],
			"result": {
				"name": "opacity",
				"schema": {
					"$ref": "#/components/schemas/Opacity"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "opacity",
						"value": 100
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.backgroundColor",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered background color for displaying closed-captions, .",
			"params": [],
			"result": {
				"name": "color",
				"schema": {
					"$ref": "#/components/schemas/Color"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "color",
						"value": "#000000"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.backgroundOpacity",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered opacity for displaying closed-captions backgrounds.",
			"params": [],
			"result": {
				"name": "opacity",
				"schema": {
					"$ref": "#/components/schemas/Opacity"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "opacity",
						"value": 100
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.textAlign",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered horizontal alignment for displaying closed-captions characters.",
			"params": [],
			"result": {
				"name": "opacity",
				"schema": {
					"$ref": "#/components/schemas/HorizontalAlignment"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "aligment",
						"value": "center"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.textAlignVertical",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered horizontal alignment for displaying closed-captions characters.",
			"params": [],
			"result": {
				"name": "opacity",
				"schema": {
					"$ref": "#/components/schemas/VerticalAlignment"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "alignement",
						"value": "middle"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onEnabledChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "enabled"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "Whether or not closed-captions are enabled.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "enabled",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "enabled",
						"value": true
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onFontFamilyChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "fontFamily"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font family for displaying closed-captions.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "family",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/FontFamily"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "family",
						"value": "Monospace sans-serif"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onFontSizeChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "fontSize"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font size for displaying closed-captions.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "size",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/FontSize"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "size",
						"value": 1
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onFontColorChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "fontColor"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font color for displaying closed-captions.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "color",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Color"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "color",
						"value": "#ffffff"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onFontEdgeChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "fontEdge"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font edge style for displaying closed-captions.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "edge",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/FontEdge"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "edge",
						"value": "none"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onFontEdgeColorChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "fontEdgeColor"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font edge color for displaying closed-captions.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "color",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Color"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "color",
						"value": "#000000"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onFontOpacityChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "fontOpacity"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered opacity for displaying closed-captions characters.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "opacity",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Opacity"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "opacity",
						"value": 100
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onBackgroundColorChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "backgroundColor"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered background color for displaying closed-captions, .",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "color",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Color"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "color",
						"value": "#000000"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onBackgroundOpacityChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "backgroundOpacity"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered opacity for displaying closed-captions backgrounds.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "opacity",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Opacity"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "opacity",
						"value": 100
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onTextAlignChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "textAlign"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered horizontal alignment for displaying closed-captions characters.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "opacity",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/HorizontalAlignment"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "aligment",
						"value": "center"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.onTextAlignVerticalChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "textAlignVertical"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered horizontal alignment for displaying closed-captions characters.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "opacity",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/VerticalAlignment"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "alignement",
						"value": "middle"
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setEnabled",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "enabled"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "Whether or not closed-captions are enabled.",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "enabled",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setFontFamily",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "fontFamily"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font family for displaying closed-captions.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/FontFamily"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "Monospace sans-serif"
						}
					],
					"result": {
						"name": "family",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setFontSize",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "fontSize"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font size for displaying closed-captions.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/FontSize"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": 1
						}
					],
					"result": {
						"name": "size",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setFontColor",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "fontColor"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font color for displaying closed-captions.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Color"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "#ffffff"
						}
					],
					"result": {
						"name": "color",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setFontEdge",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "fontEdge"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font edge style for displaying closed-captions.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/FontEdge"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "none"
						}
					],
					"result": {
						"name": "edge",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setFontEdgeColor",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "fontEdgeColor"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered font edge color for displaying closed-captions.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Color"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "#000000"
						}
					],
					"result": {
						"name": "color",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setFontOpacity",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "fontOpacity"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered opacity for displaying closed-captions characters.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Opacity"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": 100
						}
					],
					"result": {
						"name": "opacity",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setBackgroundColor",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "backgroundColor"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered background color for displaying closed-captions, .",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Color"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "#000000"
						}
					],
					"result": {
						"name": "color",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setBackgroundOpacity",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "backgroundOpacity"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered opacity for displaying closed-captions backgrounds.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Opacity"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": 100
						}
					],
					"result": {
						"name": "opacity",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setTextAlign",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "textAlign"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered horizontal alignment for displaying closed-captions characters.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/HorizontalAlignment"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "center"
						}
					],
					"result": {
						"name": "aligment",
						"value": null
					}
				}
			]
		},
		{
			"name": "ClosedCaptions.setTextAlignVertical",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "textAlignVertical"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The prefered horizontal alignment for displaying closed-captions characters.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/VerticalAlignment"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "middle"
						}
					],
					"result": {
						"name": "alignement",
						"value": null
					}
				}
			]
		},
		{
			"name": "DeveloperTools.find",
			"summary": "Starts a long-running DNS-SD search for a list of developer tools that match the standard 'Firebolt Developer Tool' service type",
			"tags": [
				{
					"name": "temporal-set"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				}
			],
			"params": [],
			"result": {
				"name": "result",
				"schema": {
					"type": "array",
					"items": {
						"title": "Tool",
						"$ref": "#/components/schemas/DeveloperTool"
					}
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							{
								"id": "ff6340fb-8576-494c-97c6-e60e9a4eeba9",
								"name": "A tool"
							}
						]
					}
				}
			]
		},
		{
			"name": "DeveloperTools.pair",
			"summary": "Configures Firebolt to accept incoming Firebolt JSON RPC messages from the developer tool identified by the given developer tool ID",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				}
			],
			"params": [
				{
					"name": "id",
					"summary": "The ID of the DeveloperTool to which to connect",
					"required": true,
					"schema": {
						"type": "string",
						"format": "uuid"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "id",
							"value": "ff6340fb-8576-494c-97c6-e60e9a4eeba9"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "DeveloperTools.unpair",
			"summary": "Disconnect Firebolt as a web socket client from the web socket that corresponds to the given developer tool ID",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				}
			],
			"params": [
				{
					"name": "id",
					"summary": "The ID of the DeveloperTool from which to disconnect",
					"required": true,
					"schema": {
						"type": "string",
						"format": "uuid"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "id",
							"value": "ff6340fb-8576-494c-97c6-e60e9a4eeba9"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "DeveloperTools.onToolAvailable",
			"summary": "Starts a long-running DNS-SD search for a list of developer tools that match the standard 'Firebolt Developer Tool' service type",
			"tags": [
				{
					"name": "event",
					"x-temporal-for": "find"
				},
				{
					"name": "rpc-only"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				},
				{
					"name": "rpc-only"
				}
			],
			"params": [
				{
					"name": "correlationId",
					"required": true,
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"title": "Tool",
							"$ref": "#/components/schemas/DeveloperTool"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "correlationId",
							"value": "xyz"
						},
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"id": "ff6340fb-8576-494c-97c6-e60e9a4eeba9",
							"name": "A tool"
						}
					}
				}
			]
		},
		{
			"name": "DeveloperTools.onToolUnavailable",
			"summary": "Starts a long-running DNS-SD search for a list of developer tools that match the standard 'Firebolt Developer Tool' service type",
			"tags": [
				{
					"name": "event",
					"x-temporal-for": "find"
				},
				{
					"name": "rpc-only"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				},
				{
					"name": "rpc-only"
				}
			],
			"params": [
				{
					"name": "correlationId",
					"required": true,
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"title": "Tool",
							"$ref": "#/components/schemas/DeveloperTool"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "correlationId",
							"value": "xyz"
						},
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"id": "ff6340fb-8576-494c-97c6-e60e9a4eeba9",
							"name": "A tool"
						}
					}
				}
			]
		},
		{
			"name": "DeveloperTools.stopFind",
			"summary": "Starts a long-running DNS-SD search for a list of developer tools that match the standard 'Firebolt Developer Tool' service type",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				},
				{
					"name": "rpc-only"
				}
			],
			"params": [
				{
					"name": "correlationId",
					"required": true,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "correlationId",
							"value": "xyz"
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Device.name",
			"summary": "The human readable name of the device",
			"params": [],
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"result": {
				"name": "value",
				"summary": "the device friendly-name",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Example value for device name",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "Device.onDeviceNameChanged",
			"tags": [
				{
					"name": "event"
				},
				{
					"name": "deprecated",
					"x-since": "0.6.0",
					"x-alternative": "Device.name()"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"summary": "Get the human readable name of the device",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "the device friendly-name",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "string"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Getting the device name",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "Device.provision",
			"summary": "Used by a distributor to push provision info to firebolt.",
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:account:id",
						"xrn:firebolt:capability:device:id",
						"xrn:firebolt:capability:device:distributor"
					]
				}
			],
			"params": [
				{
					"name": "accountId",
					"summary": "The id of the account that is device is attached to in the back office.",
					"required": true,
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "deviceId",
					"summary": "The id of the device in the back office.",
					"required": true,
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "distributorId",
					"summary": "The id of the distributor in the back office.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "accountId",
							"value": "12345678910"
						},
						{
							"name": "deviceId",
							"value": "987654321111"
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				},
				{
					"name": "With distributor id",
					"params": [
						{
							"name": "accountId",
							"value": "12345678910"
						},
						{
							"name": "deviceId",
							"value": "987654321111"
						},
						{
							"name": "distributorId",
							"value": "global_partner"
						}
					],
					"result": {
						"name": "partnerResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "Device.developerMode",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				}
			],
			"summary": "Whether or not developer mode is enabled.",
			"params": [],
			"result": {
				"name": "developerMode",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "developerMode",
						"value": true
					}
				}
			]
		},
		{
			"name": "Device.onNameChanged",
			"summary": "The human readable name of the device",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-alternative": "name"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"result": {
				"name": "value",
				"summary": "the device friendly-name",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "string"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Example value for device name",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "Device.onDeveloperModeChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "developerMode"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:developer:tools"
					]
				}
			],
			"summary": "Whether or not developer mode is enabled.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "developerMode",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "developerMode",
						"value": true
					}
				}
			]
		},
		{
			"name": "Device.setName",
			"summary": "The human readable name of the device",
			"params": [
				{
					"name": "value",
					"summary": "the device friendly-name",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "name"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example value for device name",
					"params": [
						{
							"name": "value",
							"value": "Living Room"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Device.setDeveloperMode",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "developerMode"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:developer:tools"
					]
				}
			],
			"summary": "Whether or not developer mode is enabled.",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "developerMode",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.onRequestStandard",
			"summary": "Registers as a provider for when the user should be shown a standard keyboard.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"$ref": "#/components/schemas/KeyboardResult",
						"examples": [
							{
								"text": "username"
							}
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "sessionRequest",
				"summary": "The request to start a keyboard session",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/KeyboardProviderRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "abc",
							"parameters": {
								"message": "Enter your user name."
							}
						}
					}
				}
			]
		},
		{
			"name": "Keyboard.onRequestPassword",
			"summary": "Registers as a provider for when the user should be shown a password keyboard, with dots for each character entered.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"$ref": "#/components/schemas/KeyboardResult",
						"examples": [
							{
								"text": "password"
							}
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "sessionRequest",
				"summary": "The request to start a keyboard session",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/KeyboardProviderRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "abc",
							"parameters": {
								"message": "Enter your user name."
							}
						}
					}
				}
			]
		},
		{
			"name": "Keyboard.onRequestEmail",
			"summary": "Registers as a provider for when the user should be shown a keyboard optimized for email address entry.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"$ref": "#/components/schemas/KeyboardResult",
						"examples": [
							{
								"text": "email@address.com"
							}
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "sessionRequest",
				"summary": "The request to start a keyboard session",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/KeyboardProviderRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "abc",
							"parameters": {
								"message": "Enter your user name."
							}
						}
					}
				}
			]
		},
		{
			"name": "Keyboard.standardFocus",
			"summary": "Internal API for Standard Provider to request focus for UX purposes.",
			"params": [],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-allow-focus-for": "onRequestStandard"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.passwordFocus",
			"summary": "Internal API for Password Provider to request focus for UX purposes.",
			"params": [],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-allow-focus-for": "onRequestPassword"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.emailFocus",
			"summary": "Internal API for Email Provider to request focus for UX purposes.",
			"params": [],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-allow-focus-for": "onRequestEmail"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.standardResponse",
			"summary": "Internal API for Standard Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"$ref": "#/components/schemas/KeyboardResult",
										"examples": [
											{
												"text": "username"
											}
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-response-for": "onRequestStandard"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"text": "username"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.standardError",
			"summary": "Internal API for Standard Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-error-for": "onRequestStandard"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.passwordResponse",
			"summary": "Internal API for Password Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"$ref": "#/components/schemas/KeyboardResult",
										"examples": [
											{
												"text": "password"
											}
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-response-for": "onRequestPassword"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"text": "password"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.passwordError",
			"summary": "Internal API for Password Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-error-for": "onRequestPassword"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.emailResponse",
			"summary": "Internal API for Email Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"$ref": "#/components/schemas/KeyboardResult",
										"examples": [
											{
												"text": "email@address.com"
											}
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-response-for": "onRequestEmail"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"text": "email@address.com"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Keyboard.emailError",
			"summary": "Internal API for Email Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true,
					"x-error-for": "onRequestEmail"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.setState",
			"summary": "Used by provider to update the state of an application so that the state can be emitted to apps.",
			"params": [
				{
					"name": "appId",
					"required": true,
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "state",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/LifecycleState"
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Set application lifecycle state to inactive",
					"params": [
						{
							"name": "state",
							"value": "inactive"
						},
						{
							"name": "appId",
							"value": "SomeAppId"
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.session",
			"summary": "Used by a Lifecycle provider to tell Firebolt that an app session has been started or updated. Firebolt can use this information to have context about the app when it makes API requests",
			"params": [
				{
					"name": "session",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/AppSession"
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "object",
					"required": [
						"sessionId"
					],
					"properties": {
						"sessionId": {
							"type": "string"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Starts or updates an app session",
					"params": [
						{
							"name": "session",
							"value": {
								"app": {
									"id": "SomeApp",
									"url": "https://some-app.firebolt.rdkcentral.com"
								},
								"runtime": {
									"id": "WebBrowser-1"
								},
								"launch": {
									"intent": {
										"action": "search",
										"data": {
											"query": "Dog videos"
										},
										"context": {
											"source": "voice"
										}
									}
								}
							}
						}
					],
					"result": {
						"name": "defaultResult",
						"value": {
							"sessionId": "c0d012b4-0854-4bbc-82d5-ab52ac29dd94"
						}
					}
				}
			]
		},
		{
			"name": "Lifecycle.onRequestLaunch",
			"summary": "Tells the provider that an app should be launched",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"$ref": "#/components/schemas/LifecycleLaunchResponse",
						"examples": [
							{
								"success": true
							},
							{
								"success": false
							}
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:launch",
					"x-allow-focus": false
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "launch",
				"summary": "The app was requested to be launched",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/LifecycleLaunchRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "123",
							"parameters": {
								"appId": "SomeAppId",
								"intent": {
									"action": "home",
									"context": {
										"source": "voice"
									}
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "Lifecycle.onRequestReady",
			"summary": "Tells the provider that an app has said they are ready",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"const": null,
						"examples": [
							null
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "ready",
				"summary": "The app has said they are ready",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/LifecycleReadyRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "123",
							"parameters": {
								"appId": "SomeAppId"
							}
						}
					}
				}
			]
		},
		{
			"name": "Lifecycle.onRequestClose",
			"summary": "Tells the provider that an app has requested closing itself",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false
				},
				{
					"name": "event",
					"x-response": {
						"const": null,
						"examples": [
							null
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "close",
				"summary": "The app has requested to be closed",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/LifecycleCloseRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "123",
							"parameters": {
								"appId": "SomeAppId",
								"reason": "userExit"
							}
						}
					}
				}
			]
		},
		{
			"name": "Lifecycle.onRequestFinished",
			"summary": "Tells the provider that an app has said they are finished cleaning up while unloading",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false
				},
				{
					"name": "event",
					"x-response": {
						"const": null,
						"examples": [
							null
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "finished",
				"summary": "The app has said they are finished",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/LifecycleFinishedRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "123",
							"parameters": {
								"appId": "SomeAppId"
							}
						}
					}
				}
			]
		},
		{
			"name": "Lifecycle.launchResponse",
			"summary": "Internal API for Launch Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"$ref": "#/components/schemas/LifecycleLaunchResponse",
										"examples": [
											{
												"success": true
											},
											{
												"success": false
											}
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:launch",
					"x-allow-focus": false,
					"x-response-for": "onRequestLaunch"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example #1",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"success": true
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Example #2",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"success": false
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.launchError",
			"summary": "Internal API for Launch Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:launch",
					"x-allow-focus": false,
					"x-error-for": "onRequestLaunch"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.readyResponse",
			"summary": "Internal API for Ready Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"const": null,
										"examples": [
											null
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false,
					"x-response-for": "onRequestReady"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": null
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.readyError",
			"summary": "Internal API for Ready Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false,
					"x-error-for": "onRequestReady"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.closeResponse",
			"summary": "Internal API for Close Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"const": null,
										"examples": [
											null
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false,
					"x-response-for": "onRequestClose"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": null
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.closeError",
			"summary": "Internal API for Close Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false,
					"x-error-for": "onRequestClose"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.finishedResponse",
			"summary": "Internal API for Finished Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"const": null,
										"examples": [
											null
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false,
					"x-response-for": "onRequestFinished"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": null
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.finishedError",
			"summary": "Internal API for Finished Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:lifecycle:state",
					"x-allow-focus": false,
					"x-error-for": "onRequestFinished"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Localization.locality",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locality"
					]
				},
				{
					"name": "property"
				}
			],
			"summary": "Get the locality/city the device is located in",
			"params": [],
			"result": {
				"name": "locality",
				"summary": "the device city",
				"schema": {
					"$ref": "#/components/schemas/Locality"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Philadelphia"
					}
				}
			]
		},
		{
			"name": "Localization.postalCode",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:postal-code"
					]
				}
			],
			"summary": "Get the postal code the device is located in",
			"params": [],
			"result": {
				"name": "postalCode",
				"summary": "the device postal code",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "19103"
					}
				}
			]
		},
		{
			"name": "Localization.countryCode",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:country-code"
					]
				}
			],
			"summary": "Get the ISO 3166 code for the counrty device is located in",
			"params": [],
			"result": {
				"name": "code",
				"summary": "the device country code",
				"schema": {
					"$ref": "#/components/schemas/CountryCode"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "US"
					}
				}
			]
		},
		{
			"name": "Localization.language",
			"summary": "Get the ISO 639 1/2 code for the preferred language",
			"params": [],
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"result": {
				"name": "lang",
				"summary": "the device language",
				"schema": {
					"$ref": "#/components/schemas/Language"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "en"
					}
				}
			]
		},
		{
			"name": "Localization.locale",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locale"
					]
				}
			],
			"summary": "Get the *full* BCP 47 code, including script, region, variant, etc., for the preferred langauage/locale",
			"params": [],
			"result": {
				"name": "locale",
				"summary": "the device locale",
				"schema": {
					"$ref": "#/components/schemas/Locale"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "en-US"
					}
				}
			]
		},
		{
			"name": "Localization.additionalInfo",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"summary": "Get any platform-specific localization information, in an Map<string, string>",
			"params": [],
			"result": {
				"name": "info",
				"summary": "the additional info",
				"schema": {
					"type": "object",
					"additionalProperties": {
						"type": "string",
						"maxLength": 1024
					},
					"maxProperties": 32
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "info",
						"value": {}
					}
				}
			]
		},
		{
			"name": "Localization.onLocalityChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "locality"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locality"
					]
				}
			],
			"summary": "Get the locality/city the device is located in",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "locality",
				"summary": "the device city",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Locality"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": "Philadelphia"
					}
				}
			]
		},
		{
			"name": "Localization.onPostalCodeChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "postalCode"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:postal-code"
					]
				}
			],
			"summary": "Get the postal code the device is located in",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "postalCode",
				"summary": "the device postal code",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "string"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": "19103"
					}
				}
			]
		},
		{
			"name": "Localization.onCountryCodeChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "countryCode"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:country-code"
					]
				}
			],
			"summary": "Get the ISO 3166 code for the counrty device is located in",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "code",
				"summary": "the device country code",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/CountryCode"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": "US"
					}
				}
			]
		},
		{
			"name": "Localization.onLanguageChanged",
			"summary": "Get the ISO 639 1/2 code for the preferred language",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-alternative": "language"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"result": {
				"name": "lang",
				"summary": "the device language",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Language"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": "en"
					}
				}
			]
		},
		{
			"name": "Localization.onLocaleChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "locale"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locale"
					]
				}
			],
			"summary": "Get the *full* BCP 47 code, including script, region, variant, etc., for the preferred langauage/locale",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "locale",
				"summary": "the device locale",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/Locale"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": "en-US"
					}
				}
			]
		},
		{
			"name": "Localization.setLocality",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "locality"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:localization:locality"
					]
				}
			],
			"summary": "Get the locality/city the device is located in",
			"params": [
				{
					"name": "value",
					"summary": "the device city",
					"schema": {
						"$ref": "#/components/schemas/Locality"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "Philadelphia"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Localization.setPostalCode",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "postalCode"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:localization:postal-code"
					]
				}
			],
			"summary": "Get the postal code the device is located in",
			"params": [
				{
					"name": "value",
					"summary": "the device postal code",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "19103"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Localization.setCountryCode",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "countryCode"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:localization:country-code"
					]
				}
			],
			"summary": "Get the ISO 3166 code for the counrty device is located in",
			"params": [
				{
					"name": "value",
					"summary": "the device country code",
					"schema": {
						"$ref": "#/components/schemas/CountryCode"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "US"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Localization.setLanguage",
			"summary": "Get the ISO 639 1/2 code for the preferred language",
			"params": [
				{
					"name": "value",
					"summary": "the device language",
					"schema": {
						"$ref": "#/components/schemas/Language"
					},
					"required": true
				}
			],
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "language"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "en"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Localization.setLocale",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "locale"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:localization:locale"
					]
				}
			],
			"summary": "Get the *full* BCP 47 code, including script, region, variant, etc., for the preferred langauage/locale",
			"params": [
				{
					"name": "value",
					"summary": "the device locale",
					"schema": {
						"$ref": "#/components/schemas/Locale"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": "en-US"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "PinChallenge.onRequestChallenge",
			"summary": "Registers as a provider for when the user should be challenged in order to confirm access to a capability through a pin prompt",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-response": {
						"$ref": "#/components/schemas/PinChallengeResult",
						"examples": [
							{
								"granted": true,
								"reason": "correctPin"
							},
							{
								"granted": false,
								"reason": "cancelled"
							}
						]
					},
					"x-error": {
						"type": "object",
						"additionalProperties": false,
						"required": [
							"code",
							"message"
						],
						"properties": {
							"code": {
								"title": "errorObjectCode",
								"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
								"type": "integer"
							},
							"message": {
								"title": "errorObjectMessage",
								"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
								"type": "string"
							},
							"data": {
								"title": "errorObjectData",
								"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
							}
						}
					}
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:pinchallenge",
					"x-allow-focus": true
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "challenge",
				"summary": "The request to challenge the user",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/PinChallengeProviderRequest"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"correlationId": "abc",
							"parameters": {
								"capability": "xrn:firebolt:capability:commerce::purchase",
								"requestor": {
									"id": "ReferenceApp",
									"name": "Firebolt Reference App"
								},
								"pinSpace": "purchase"
							}
						}
					}
				}
			]
		},
		{
			"name": "PinChallenge.challengeFocus",
			"summary": "Internal API for Challenge Provider to request focus for UX purposes.",
			"params": [],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:pinchallenge",
					"x-allow-focus": true,
					"x-allow-focus-for": "onRequestChallenge"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example",
					"params": [],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "PinChallenge.challengeResponse",
			"summary": "Internal API for Challenge Provider to send back response.",
			"params": [
				{
					"name": "response",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"$ref": "#/components/schemas/PinChallengeResult",
										"examples": [
											{
												"granted": true,
												"reason": "correctPin"
											},
											{
												"granted": false,
												"reason": "cancelled"
											}
										]
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:pinchallenge",
					"x-allow-focus": true,
					"x-response-for": "onRequestChallenge"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example #1",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"granted": true,
									"reason": "correctPin"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Example #2",
					"params": [
						{
							"name": "response",
							"value": {
								"correlationId": "123",
								"result": {
									"granted": false,
									"reason": "cancelled"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "PinChallenge.challengeError",
			"summary": "Internal API for Challenge Provider to send back error.",
			"params": [
				{
					"name": "error",
					"required": true,
					"schema": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProviderResponse"
							},
							{
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"additionalProperties": false,
										"required": [
											"code",
											"message"
										],
										"properties": {
											"code": {
												"title": "errorObjectCode",
												"description": "A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.",
												"type": "integer"
											},
											"message": {
												"title": "errorObjectMessage",
												"description": "A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.",
												"type": "string"
											},
											"data": {
												"title": "errorObjectData",
												"description": "A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.)."
											}
										}
									}
								}
							}
						]
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:pinchallenge",
					"x-allow-focus": true,
					"x-error-for": "onRequestChallenge"
				},
				{
					"name": "rpc-only"
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Example 1",
					"params": [
						{
							"name": "error",
							"value": {
								"correlationId": "123",
								"result": {
									"code": 1,
									"message": "Error"
								}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.allowResumePoints",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content to show in the main experience",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowUnentitledResumePoints",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content from unentitled providers to show in the main experience",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowWatchHistory",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their watch history from all sources to show in the main experience",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowProductAnalytics",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data can be used for analytics about the product",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowPersonalization",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowUnentitledPersonalization",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations for unentitled content",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowRemoteDiagnostics",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their personal data to be included in diagnostic telemetry. This also allows whether device logs can be remotely accessed from the client device",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowPrimaryContentAdTargeting",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in the primary experience",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowPrimaryBrowseAdTargeting",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while browsing in the primary experience",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowAppContentAdTargeting",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in apps",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowACRCollection",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their automatic content recognition data to be collected",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.allowCameraAnalytics",
			"tags": [
				{
					"name": "property",
					"x-allow-value": true
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows data from their camera to be used for Product Analytics",
			"params": [],
			"result": {
				"name": "allow",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.settings",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Gets the allowed value for all privacy settings",
			"params": [],
			"result": {
				"name": "settings",
				"schema": {
					"$ref": "#/components/schemas/PrivacySettings"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "settings",
						"value": {
							"allowACRCollection": true,
							"allowResumePoints": false,
							"allowAppContentAdTargeting": false,
							"allowCameraAnalytics": true,
							"allowPersonalization": true,
							"allowPrimaryBrowseAdTargeting": false,
							"allowPrimaryContentAdTargeting": false,
							"allowProductAnalytics": true,
							"allowRemoteDiagnostics": true,
							"allowUnentitledPersonalization": true,
							"allowUnentitledResumePoints": false,
							"allowWatchHistory": true
						}
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowResumePointsChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowResumePoints"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content to show in the main experience",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowUnentitledResumePointsChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowUnentitledResumePoints"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content from unentitled providers to show in the main experience",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowWatchHistoryChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowWatchHistory"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their watch history from all sources to show in the main experience",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowProductAnalyticsChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowProductAnalytics"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data can be used for analytics about the product",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowPersonalizationChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowPersonalization"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowUnentitledPersonalizationChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowUnentitledPersonalization"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations for unentitled content",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowRemoteDiagnosticsChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowRemoteDiagnostics"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their personal data to be included in diagnostic telemetry. This also allows whether device logs can be remotely accessed from the client device",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowPrimaryContentAdTargetingChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowPrimaryContentAdTargeting"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in the primary experience",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowPrimaryBrowseAdTargetingChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowPrimaryBrowseAdTargeting"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while browsing in the primary experience",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowAppContentAdTargetingChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowAppContentAdTargeting"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in apps",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowACRCollectionChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowACRCollection"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their automatic content recognition data to be collected",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.onAllowCameraAnalyticsChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "allowCameraAnalytics"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows data from their camera to be used for Product Analytics",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "allow",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": true
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowResumePoints",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowResumePoints"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content to show in the main experience",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowUnentitledResumePoints",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowUnentitledResumePoints"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content from unentitled providers to show in the main experience",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowWatchHistory",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowWatchHistory"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their watch history from all sources to show in the main experience",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowProductAnalytics",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowProductAnalytics"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data can be used for analytics about the product",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowPersonalization",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowPersonalization"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowUnentitledPersonalization",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowUnentitledPersonalization"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations for unentitled content",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowRemoteDiagnostics",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowRemoteDiagnostics"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their personal data to be included in diagnostic telemetry. This also allows whether device logs can be remotely accessed from the client device",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowPrimaryContentAdTargeting",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowPrimaryContentAdTargeting"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in the primary experience",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowPrimaryBrowseAdTargeting",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowPrimaryBrowseAdTargeting"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while browsing in the primary experience",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowAppContentAdTargeting",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowAppContentAdTargeting"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in apps",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowACRCollection",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowACRCollection"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their automatic content recognition data to be collected",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "Privacy.setAllowCameraAnalytics",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "allowCameraAnalytics"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows data from their camera to be used for Product Analytics",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "allow",
						"value": null
					}
				}
			]
		},
		{
			"name": "UserGrants.app",
			"summary": "Get all granted and denied user grants for the given app",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:grants:state"
					]
				}
			],
			"params": [
				{
					"name": "appId",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "info",
				"summary": "The list of grants for this app",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/GrantInfo"
					}
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "appId",
							"value": "certapp"
						}
					],
					"result": {
						"name": "defaultResult",
						"value": [
							{
								"app": {
									"id": "certapp",
									"title": "Firebolt Certification"
								},
								"state": "granted",
								"capability": "xrn:firebolt:capability:data:app-usage",
								"role": "use",
								"lifespan": "seconds",
								"expires": "2022-12-14T20:20:39+00:00"
							},
							{
								"app": {
									"id": "certapp",
									"title": "Firebolt Certification"
								},
								"state": "denied",
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"role": "use",
								"lifespan": "appActive"
							}
						]
					}
				}
			]
		},
		{
			"name": "UserGrants.device",
			"summary": "Get all granted and denied user grants for the device",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:grants:state"
					]
				}
			],
			"params": [],
			"result": {
				"name": "info",
				"summary": "The list of grants for the device",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/GrantInfo"
					}
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "defaultResult",
						"value": [
							{
								"state": "granted",
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"role": "use",
								"lifespan": "powerActive"
							}
						]
					}
				}
			]
		},
		{
			"name": "UserGrants.capability",
			"summary": "Get all granted and denied user grants for the given capability",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:grants:state"
					]
				}
			],
			"params": [
				{
					"name": "capability",
					"schema": {
						"$ref": "#/components/schemas/Capability"
					},
					"required": true
				}
			],
			"result": {
				"name": "info",
				"summary": "The list of grants associated with the given capability",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/GrantInfo"
					}
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						}
					],
					"result": {
						"name": "defaultResult",
						"value": [
							{
								"state": "granted",
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"role": "use",
								"lifespan": "powerActive"
							}
						]
					}
				}
			]
		},
		{
			"name": "UserGrants.grant",
			"summary": "Grants a given capability to a specific app, if appropriate. Calling this results in a persisted active grant that lasts for the duration of the grant policy lifespan. ",
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:grants:state"
					]
				}
			],
			"params": [
				{
					"name": "role",
					"schema": {
						"$ref": "#/components/schemas/Role"
					},
					"required": true
				},
				{
					"name": "capability",
					"schema": {
						"$ref": "#/components/schemas/Capability"
					},
					"required": true
				},
				{
					"name": "options",
					"schema": {
						"$ref": "#/components/schemas/GrantModificationOptions"
					}
				}
			],
			"result": {
				"name": "voice",
				"schema": {
					"const": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "role",
							"value": "use"
						},
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						},
						{
							"name": "options",
							"value": {
								"appId": "certapp"
							}
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "UserGrants.deny",
			"summary": "Denies a given capability, to a specific app if appropriate. Calling this results in a persisted Denied Grant that lasts for the duration of the Grant Policy lifespan. ",
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:grants:state"
					]
				}
			],
			"params": [
				{
					"name": "role",
					"schema": {
						"$ref": "#/components/schemas/Role"
					},
					"required": true
				},
				{
					"name": "capability",
					"schema": {
						"$ref": "#/components/schemas/Capability"
					},
					"required": true
				},
				{
					"name": "options",
					"schema": {
						"$ref": "#/components/schemas/GrantModificationOptions"
					}
				}
			],
			"result": {
				"name": "voice",
				"schema": {
					"const": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "role",
							"value": "use"
						},
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						},
						{
							"name": "options",
							"value": {
								"appId": "certapp"
							}
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "UserGrants.clear",
			"summary": "Clears the grant for a given capability, to a specific app if appropriate. Calling this results in a persisted Denied Grant that lasts for the duration of the Grant Policy lifespan. ",
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:grants:state"
					]
				}
			],
			"params": [
				{
					"name": "role",
					"schema": {
						"$ref": "#/components/schemas/Role"
					},
					"required": true
				},
				{
					"name": "capability",
					"schema": {
						"$ref": "#/components/schemas/Capability"
					},
					"required": true
				},
				{
					"name": "options",
					"schema": {
						"$ref": "#/components/schemas/GrantModificationOptions"
					}
				}
			],
			"result": {
				"name": "voice",
				"schema": {
					"const": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "role",
							"value": "use"
						},
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						},
						{
							"name": "options",
							"value": {
								"appId": "certapp"
							}
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "UserGrants.request",
			"summary": "Requests Firebolt to carry out a set of user grants for a given application such that the user grant provider is notified or an existing user grant is reused.",
			"tags": [
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:grants:state"
					]
				}
			],
			"params": [
				{
					"name": "appId",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "permissions",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Permission"
						},
						"minItems": 1
					},
					"required": true
				}
			],
			"result": {
				"name": "info",
				"summary": "The result of all grants requested by this",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/GrantInfo"
					}
				}
			},
			"examples": [
				{
					"name": "Default result",
					"params": [
						{
							"name": "appId",
							"value": "certapp"
						},
						{
							"name": "permissions",
							"value": [
								{
									"role": "use",
									"capability": "xrn:firebolt:capability:localization:postal-code"
								}
							]
						}
					],
					"result": {
						"name": "defaultResult",
						"value": [
							{
								"app": {
									"id": "certapp",
									"title": "Certification App"
								},
								"state": "granted",
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"role": "use",
								"lifespan": "powerActive"
							}
						]
					}
				}
			]
		},
		{
			"name": "VoiceGuidance.enabled",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "Whether or not voice-guidance is enabled.",
			"params": [],
			"result": {
				"name": "enabled",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "enabled",
						"value": true
					}
				}
			]
		},
		{
			"name": "VoiceGuidance.speed",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "The speed at which voice guidance speech will be read back to the user.",
			"params": [],
			"result": {
				"name": "speed",
				"schema": {
					"$ref": "#/components/schemas/VoiceSpeed"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "speed",
						"value": 1
					}
				}
			]
		},
		{
			"name": "VoiceGuidance.onEnabledChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "enabled"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "Whether or not voice-guidance is enabled.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "enabled",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "boolean"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "enabled",
						"value": true
					}
				}
			]
		},
		{
			"name": "VoiceGuidance.onSpeedChanged",
			"tags": [
				{
					"name": "event",
					"x-alternative": "speed"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "The speed at which voice guidance speech will be read back to the user.",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "speed",
				"schema": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/VoiceSpeed"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "speed",
						"value": 1
					}
				}
			]
		},
		{
			"name": "VoiceGuidance.setEnabled",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "enabled"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "Whether or not voice-guidance is enabled.",
			"params": [
				{
					"name": "value",
					"schema": {
						"type": "boolean"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": true
						}
					],
					"result": {
						"name": "enabled",
						"value": null
					}
				}
			]
		},
		{
			"name": "VoiceGuidance.setSpeed",
			"tags": [
				{
					"name": "rpc-only",
					"x-setter-for": "speed"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "The speed at which voice guidance speech will be read back to the user.",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/VoiceSpeed"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": 1
						}
					],
					"result": {
						"name": "speed",
						"value": null
					}
				}
			]
		},
		{
			"name": "Wifi.scan",
			"summary": "Scan available wifi networks in the location.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:wifi"
					]
				}
			],
			"params": [
				{
					"name": "timeout",
					"schema": {
						"$ref": "#/components/schemas/Timeout"
					}
				}
			],
			"result": {
				"name": "list",
				"summary": "Contains a list of wifi networks available near the device.",
				"schema": {
					"$ref": "#/components/schemas/AccessPointList"
				}
			},
			"examples": [
				{
					"name": "Successful Wifi List",
					"params": [
						{
							"name": "timeout",
							"value": 30
						}
					],
					"result": {
						"name": "successfulWifiResultExample",
						"value": {
							"list": [
								{
									"ssid": "DND",
									"security": "wpa2Psk",
									"signalStrength": -70,
									"frequency": 2.4
								},
								{
									"ssid": "Fortnite",
									"security": "WPA2_ENTERPRISE_AES",
									"signalStrength": -70,
									"frequency": 5
								},
								{
									"ssid": "Guardian",
									"security": "none",
									"signalStrength": -70,
									"frequency": 2.4
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Wifi.connect",
			"summary": "Connect the device to the specified SSID.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:wifi"
					]
				}
			],
			"params": [
				{
					"name": "ssid",
					"schema": {
						"type": "string"
					},
					"description": "Name of Wifi SSID to connect for the device."
				},
				{
					"name": "passphrase",
					"schema": {
						"type": "string"
					},
					"description": "Password or Passphrase for the wifi."
				},
				{
					"name": "security",
					"schema": {
						"$ref": "#/components/schemas/WifiSecurityMode"
					}
				}
			],
			"result": {
				"name": "connectedWifi",
				"summary": "Successful Response after connecting to the Wifi.",
				"schema": {
					"$ref": "#/components/schemas/AccessPoint"
				}
			},
			"examples": [
				{
					"name": "Connect to a wpa2Psk Wifi with password",
					"params": [
						{
							"name": "ssid",
							"value": "DND"
						},
						{
							"name": "passphrase",
							"value": "gargoyle"
						},
						{
							"name": "security",
							"value": "wpa2Psk"
						}
					],
					"result": {
						"name": "successfulWifiConnection",
						"value": {
							"ssid": "DND",
							"security": "wpa2Psk",
							"signalStrength": -70,
							"frequency": 2.4
						}
					}
				},
				{
					"name": "Connect to a WPA2 PSK Wifi with password",
					"params": [
						{
							"name": "ssid",
							"value": "Guardian WIFI"
						},
						{
							"name": "passphrase",
							"value": ""
						},
						{
							"name": "security",
							"value": "none"
						}
					],
					"result": {
						"name": "successfulWifiConnection",
						"value": {
							"ssid": "Guardian WIFI",
							"security": "none",
							"signalStrength": -70,
							"frequency": 2.4
						}
					}
				}
			]
		},
		{
			"name": "Wifi.disconnect",
			"summary": "Disconnect the device if connected via WIFI.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:wifi"
					]
				}
			],
			"params": [],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Disconnect",
					"params": [],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "Wifi.wps",
			"summary": "Connect to WPS",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:wifi"
					]
				}
			],
			"params": [
				{
					"name": "security",
					"schema": {
						"$ref": "#/components/schemas/WPSSecurityPin"
					}
				}
			],
			"result": {
				"name": "connectedWifi",
				"summary": "Successful Response after connecting to the Wifi.",
				"schema": {
					"$ref": "#/components/schemas/AccessPoint"
				}
			},
			"examples": [
				{
					"name": "Connect to a WPS Wifi router",
					"params": [
						{
							"name": "security",
							"value": "pushButton"
						}
					],
					"result": {
						"name": "successfulWifiConnection",
						"value": {
							"ssid": "DND",
							"security": "wpa2Psk",
							"signalStrength": -70,
							"frequency": 2.4
						}
					}
				}
			]
		}
	],
	"components": {
		"schemas": {
			"VoiceGuidanceSettings": {
				"title": "VoiceGuidanceSettings",
				"type": "object",
				"required": [
					"enabled",
					"speed"
				],
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether or not voice guidance should be enabled by default"
					},
					"speed": {
						"type": "number",
						"description": "The speed at which voice guidance speech will be read back to the user"
					}
				}
			},
			"ClosedCaptionsSettings": {
				"title": "ClosedCaptionsSettings",
				"type": "object",
				"required": [
					"enabled",
					"styles"
				],
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether or not closed-captions should be enabled by default"
					},
					"styles": {
						"$ref": "#/components/schemas/ClosedCaptionsStyles"
					}
				},
				"examples": [
					{
						"enabled": true,
						"styles": {
							"fontFamily": "Monospace sans-serif",
							"fontSize": 1,
							"fontColor": "#ffffff",
							"fontEdge": "none",
							"fontEdgeColor": "#7F7F7F",
							"fontOpacity": 100,
							"backgroundColor": "#000000",
							"backgroundOpacity": 100,
							"textAlign": "center",
							"textAlignVertical": "middle"
						}
					}
				]
			},
			"ListenResponse": {
				"title": "ListenResponse",
				"type": "object",
				"required": [
					"event",
					"listening"
				],
				"properties": {
					"event": {
						"type": "string",
						"pattern": "[a-zA-Z]+\\.on[A-Z][a-zA-Z]+"
					},
					"listening": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"ClosedCaptionsStyles": {
				"title": "ClosedCaptionsStyles",
				"type": "object",
				"description": "The default styles to use when displaying closed-captions",
				"properties": {
					"fontFamily": {
						"$ref": "#/components/schemas/FontFamily"
					},
					"fontSize": {
						"$ref": "#/components/schemas/FontSize"
					},
					"fontColor": {
						"$ref": "#/components/schemas/Color"
					},
					"fontEdge": {
						"$ref": "#/components/schemas/FontEdge"
					},
					"fontEdgeColor": {
						"$ref": "#/components/schemas/Color"
					},
					"fontOpacity": {
						"$ref": "#/components/schemas/Opacity"
					},
					"backgroundColor": {
						"$ref": "#/components/schemas/Color"
					},
					"backgroundOpacity": {
						"$ref": "#/components/schemas/Opacity"
					},
					"textAlign": {
						"$ref": "#/components/schemas/HorizontalAlignment"
					},
					"textAlignVertical": {
						"$ref": "#/components/schemas/VerticalAlignment"
					}
				}
			},
			"FontFamily": {
				"type": "string"
			},
			"FontSize": {
				"type": "number",
				"minimum": 0
			},
			"Color": {
				"type": "string"
			},
			"FontEdge": {
				"type": "string"
			},
			"Opacity": {
				"type": "number",
				"minimum": 0,
				"maximum": 100
			},
			"HorizontalAlignment": {
				"type": "string"
			},
			"VerticalAlignment": {
				"type": "string"
			},
			"AccessoryList": {
				"title": "AccessoryList",
				"type": "object",
				"description": "Contains a list of Accessories paired to the device.",
				"properties": {
					"list": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AccessoryInfo"
						}
					}
				}
			},
			"AccessoryPairingTimeout": {
				"title": "AccessoryPairingTimeout",
				"description": "Defines the timeout in seconds. If the threshold for timeout is passed without a result it will throw an error.",
				"type": "integer",
				"default": 0,
				"minimum": 0,
				"maximum": 9999
			},
			"AccessoryType": {
				"title": "AccessoryType",
				"description": "Type of the device Remote,Speaker or Other",
				"type": "string",
				"enum": [
					"Remote",
					"Speaker",
					"Other"
				]
			},
			"AccessoryTypeListParam": {
				"title": "AccessoryTypeListParam",
				"description": "Type of the device Remote,Speaker or Other",
				"type": "string",
				"enum": [
					"Remote",
					"Speaker",
					"All"
				]
			},
			"AccessoryProtocol": {
				"title": "AccessoryProtocol",
				"description": "Mechanism to connect the accessory to the device",
				"type": "string",
				"enum": [
					"BluetoothLE",
					"RF4CE"
				]
			},
			"AccessoryProtocolListParam": {
				"title": "AccessoryProtocolListParam",
				"description": "Mechanism to connect the accessory to the device",
				"type": "string",
				"enum": [
					"BluetoothLE",
					"RF4CE",
					"All"
				]
			},
			"AccessoryInfo": {
				"title": "AccessoryInfo",
				"description": "Properties of a paired accessory.",
				"type": "object",
				"properties": {
					"type": {
						"$ref": "#/components/schemas/AccessoryType"
					},
					"make": {
						"type": "string",
						"description": "Name of the manufacturer of the accessory"
					},
					"model": {
						"type": "string",
						"description": "Model name of the accessory"
					},
					"protocol": {
						"$ref": "#/components/schemas/AccessoryProtocol"
					}
				}
			},
			"Token": {
				"type": "string",
				"description": "Encoded token provided by the Distributor for Device Authentication."
			},
			"Expiry": {
				"type": "integer",
				"description": "Number of secs before the token expires",
				"minimum": 1
			},
			"Session": {
				"description": "Session Token from the distributor.",
				"type": "object",
				"properties": {
					"token": {
						"$ref": "#/components/schemas/Token"
					},
					"expiresIn": {
						"$ref": "#/components/schemas/Expiry"
					}
				}
			},
			"ProviderResponse": {
				"title": "ProviderResponse",
				"type": "object",
				"required": [
					"correlationId"
				],
				"additionalProperties": false,
				"properties": {
					"correlationId": {
						"type": "string",
						"description": "The id that was passed in to the event that triggered a provider method to be called"
					},
					"result": {
						"description": "The result of the provider response."
					}
				}
			},
			"ChallengeRequestor": {
				"title": "ChallengeRequestor",
				"type": "object",
				"required": [
					"id",
					"name"
				],
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the app that requested the challenge"
					},
					"name": {
						"type": "string",
						"description": "The name of the app that requested the challenge"
					}
				}
			},
			"Challenge": {
				"title": "Challenge",
				"type": "object",
				"required": [
					"capability",
					"requestor"
				],
				"properties": {
					"capability": {
						"type": "string",
						"description": "The capability that is being requested by the user to approve"
					},
					"requestor": {
						"description": "The identity of which app is requesting access to this capability",
						"$ref": "#/components/schemas/ChallengeRequestor"
					}
				}
			},
			"ChallengeProviderRequest": {
				"title": "ChallengeProviderRequest",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProviderRequest"
					},
					{
						"type": "object",
						"required": [
							"parameters"
						],
						"properties": {
							"parameters": {
								"description": "The request to challenge the user",
								"$ref": "#/components/schemas/Challenge"
							}
						}
					}
				]
			},
			"GrantResult": {
				"title": "GrantResult",
				"type": "object",
				"required": [
					"granted"
				],
				"properties": {
					"granted": {
						"type": "boolean",
						"description": "Whether the user approved or denied the challenge"
					}
				},
				"examples": [
					{
						"granted": true
					}
				]
			},
			"ProviderRequest": {
				"title": "ProviderRequest",
				"type": "object",
				"required": [
					"correlationId"
				],
				"additionalProperties": false,
				"properties": {
					"correlationId": {
						"type": "string",
						"description": "The id that was passed in to the event that triggered a provider method to be called"
					},
					"parameters": {
						"description": "The result of the provider response.",
						"type": [
							"object",
							"null"
						]
					}
				}
			},
			"Capability": {
				"type": "string",
				"description": "A Capability is a discrete unit of functionality that a Firebolt device might be able to perform.",
				"pattern": "xrn:firebolt:capability:([a-z0-9]+)((:[a-z0-9]+)?)"
			},
			"Permission": {
				"title": "Permission",
				"description": "A Capability combined with a Role, which an app may be permitted (by a distributor) or granted (by an end user).",
				"type": "object",
				"properties": {
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"capability": {
						"$ref": "#/components/schemas/Capability"
					}
				}
			},
			"Role": {
				"title": "Role",
				"description": "Role provides access level for the app for a given capability.",
				"type": "string",
				"enum": [
					"use",
					"manage",
					"provide"
				]
			},
			"DeveloperTool": {
				"title": "DeveloperTool",
				"type": "object",
				"required": [
					"id",
					"name"
				],
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid",
						"description": "The ID that uniquely identifies this instance of a developer tool"
					},
					"name": {
						"type": "string",
						"description": "Developer-visible 'friendly name' for the developer tool"
					}
				}
			},
			"NavigationIntent": {
				"title": "NavigationIntent",
				"description": "A Firebolt compliant representation of a user intention to navigate to a specific place in an app.",
				"anyOf": [
					{
						"$ref": "#/components/schemas/HomeIntent"
					},
					{
						"$ref": "#/components/schemas/LaunchIntent"
					},
					{
						"$ref": "#/components/schemas/EntityIntent"
					},
					{
						"$ref": "#/components/schemas/PlaybackIntent"
					},
					{
						"$ref": "#/components/schemas/SearchIntent"
					},
					{
						"$ref": "#/components/schemas/SectionIntent"
					},
					{
						"$ref": "#/components/schemas/TuneIntent"
					}
				]
			},
			"ProgramType": {
				"title": "ProgramType",
				"type": "string",
				"description": "In the case of a program `entityType`, specifies the program type.",
				"enum": [
					"movie",
					"episode",
					"season",
					"series",
					"other",
					"preview",
					"extra",
					"concert",
					"sportingEvent",
					"advertisement",
					"musicVideo",
					"minisode"
				]
			},
			"HomeIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to it's home screen, and bring that app to the foreground if needed.",
				"title": "HomeIntent",
				"allOf": [
					{
						"title": "HomeIntent",
						"$ref": "#/components/schemas/Intent"
					},
					{
						"title": "HomeIntent",
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"title": "HomeIntent",
						"type": "object",
						"properties": {
							"action": {
								"const": "home"
							}
						}
					}
				],
				"examples": [
					{
						"action": "home",
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"LaunchIntent": {
				"description": "A Firebolt compliant representation of a user intention to launch an app.",
				"title": "LaunchIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"properties": {
							"action": {
								"const": "launch"
							}
						}
					}
				],
				"examples": [
					{
						"action": "launch",
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"EntityIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to a specific entity page, and bring that app to the foreground if needed.",
				"title": "EntityIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"required": [
							"data"
						],
						"properties": {
							"action": {
								"const": "entity"
							},
							"data": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/MovieEntity"
									},
									{
										"$ref": "#/components/schemas/TVEpisodeEntity"
									},
									{
										"$ref": "#/components/schemas/TVSeriesEntity"
									},
									{
										"$ref": "#/components/schemas/TVSeasonEntity"
									},
									{
										"$ref": "#/components/schemas/AdditionalEntity"
									},
									{
										"$ref": "#/components/schemas/UntypedEntity"
									}
								]
							}
						}
					}
				],
				"examples": [
					{
						"action": "entity",
						"context": {
							"source": "voice"
						},
						"data": {
							"entityType": "program",
							"programType": "movie",
							"entityId": "el-camino"
						}
					}
				]
			},
			"PlaybackIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for a specific, playable entity, and bring that app to the foreground if needed.",
				"title": "PlaybackIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"required": [
							"data"
						],
						"properties": {
							"action": {
								"const": "playback"
							},
							"data": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/MovieEntity"
									},
									{
										"$ref": "#/components/schemas/TVEpisodeEntity"
									},
									{
										"$ref": "#/components/schemas/AdditionalEntity"
									}
								]
							}
						}
					}
				],
				"examples": [
					{
						"action": "playback",
						"data": {
							"entityType": "program",
							"programType": "episode",
							"entityId": "breaking-bad-pilot",
							"seriesId": "breaking-bad",
							"seasonId": "breaking-bad-season-1"
						},
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"SearchIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to it's search UI with a search term populated, and bring that app to the foreground if needed.",
				"title": "SearchIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"properties": {
							"action": {
								"const": "search"
							},
							"data": {
								"type": "object",
								"required": [
									"query"
								],
								"properties": {
									"query": {
										"type": "string"
									}
								},
								"additionalProperties": false
							}
						}
					}
				],
				"examples": [
					{
						"action": "search",
						"data": {
							"query": "walter white"
						},
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"SectionIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to a section not covered by `home`, `entity`, `player`, or `search`, and bring that app to the foreground if needed.",
				"title": "SectionIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"properties": {
							"action": {
								"const": "section"
							},
							"data": {
								"type": "object",
								"required": [
									"sectionName"
								],
								"properties": {
									"sectionName": {
										"type": "string"
									}
								},
								"additionalProperties": false
							}
						}
					}
				],
				"examples": [
					{
						"action": "section",
						"data": {
							"sectionName": "settings"
						},
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"TuneIntent": {
				"description": "A Firebolt compliant representation of a user intention to 'tune' to a traditional over-the-air broadcast, or an OTT Stream from an OTT or vMVPD App.",
				"title": "TuneIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"required": [
							"data"
						],
						"properties": {
							"action": {
								"const": "tune"
							},
							"data": {
								"type": "object",
								"required": [
									"entity"
								],
								"additionalProperties": false,
								"properties": {
									"entity": {
										"$ref": "#/components/schemas/ChannelEntity"
									},
									"options": {
										"description": "The options property of the data property MUST have only one of the following fields.",
										"type": "object",
										"required": [],
										"additionalProperties": false,
										"minProperties": 1,
										"maxProperties": 1,
										"properties": {
											"assetId": {
												"type": "string",
												"description": "The ID of a specific 'listing', as scoped by the target App's ID-space, which the App should begin playback from."
											},
											"restartCurrentProgram": {
												"type": "boolean",
												"description": "Denotes that the App should start playback at the most recent program boundary, rather than 'live.'"
											},
											"time": {
												"type": "string",
												"format": "date-time",
												"description": "ISO 8601 Date/Time where the App should begin playback from."
											}
										}
									}
								}
							}
						}
					}
				],
				"examples": [
					{
						"action": "tune",
						"data": {
							"entity": {
								"entityType": "channel",
								"channelType": "streaming",
								"entityId": "an-ott-channel"
							},
							"options": {
								"restartCurrentProgram": true
							}
						},
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"Intent": {
				"description": "A Firebolt compliant representation of a user intention.",
				"type": "object",
				"required": [
					"action",
					"context"
				],
				"properties": {
					"action": {
						"type": "string"
					},
					"context": {
						"type": "object",
						"required": [
							"source"
						],
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"voice",
									"channel-lineup",
									"editorial",
									"device"
								]
							}
						}
					}
				}
			},
			"IntentProperties": {
				"type": "object",
				"propertyNames": {
					"enum": [
						"action",
						"data",
						"context"
					]
				}
			},
			"MovieEntity": {
				"title": "MovieEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of a Movie entity.",
						"title": "MovieEntity",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "movie"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "movie",
						"entityId": "el-camino"
					}
				]
			},
			"TVEpisodeEntity": {
				"title": "TVEpisodeEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of a TV Episode entity.",
						"title": "TVEpisodeEntity",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId",
							"seasonId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "episode"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"seriesId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"seasonId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "episode",
						"entityId": "breaking-bad-pilot",
						"seriesId": "breaking-bad",
						"seasonId": "breaking-bad-season-1"
					}
				]
			},
			"TVSeriesEntity": {
				"title": "TVSeriesEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of a TV Series entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "series"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "series",
						"entityId": "breaking-bad"
					}
				]
			},
			"TVSeasonEntity": {
				"title": "TVSeasonEntity",
				"description": "A Firebolt compliant representation of a TV Season entity.",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "season"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"seriesId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "season",
						"entityId": "breaking-bad-season-1",
						"seriesId": "breaking-bad"
					}
				]
			},
			"AdditionalEntity": {
				"title": "AdditionalEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of the remaining entity types.",
						"type": "object",
						"required": [
							"entityType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"type": "string",
								"enum": [
									"concert",
									"sportingEvent",
									"preview",
									"other",
									"advertisement",
									"musicVideo",
									"minisode",
									"extra"
								]
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "concert",
						"entityId": "live-aid"
					}
				]
			},
			"UntypedEntity": {
				"title": "UntypedEntity",
				"allOf": [
					{
						"description": "A Firebolt compliant representation of the remaining entity types.",
						"type": "object",
						"required": [
							"entityId"
						],
						"properties": {
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityId": "an-entity"
					}
				]
			},
			"ChannelEntity": {
				"title": "ChannelEntity",
				"type": "object",
				"properties": {
					"entityType": {
						"const": "channel"
					},
					"channelType": {
						"type": "string",
						"enum": [
							"streaming",
							"overTheAir"
						]
					},
					"entityId": {
						"type": "string",
						"description": "ID of the channel, in the target App's scope."
					},
					"appContentData": {
						"type": "string",
						"maxLength": 256
					}
				},
				"required": [
					"entityType",
					"channelType",
					"entityId"
				],
				"additionalProperties": false
			},
			"ProgramEntity": {
				"title": "ProgramEntity",
				"type": "object",
				"properties": {
					"entityType": {
						"const": "program"
					},
					"programType": {
						"$ref": "#/components/schemas/ProgramType"
					},
					"entityId": {
						"type": "string"
					}
				},
				"required": [
					"entityType",
					"programType",
					"entityId"
				]
			},
			"Identifier": {
				"type": "string"
			},
			"KeyboardParameters": {
				"title": "KeyboardParameters",
				"type": "object",
				"required": [
					"message"
				],
				"properties": {
					"message": {
						"description": "The message to display to the user so the user knows what they are entering",
						"type": "string"
					}
				},
				"examples": [
					{
						"type": "standard",
						"message": "Enter your user name."
					}
				]
			},
			"KeyboardProviderRequest": {
				"title": "KeyboardProviderRequest",
				"type": "object",
				"required": [
					"correlationId",
					"parameters"
				],
				"properties": {
					"correlationId": {
						"type": "string",
						"description": "An id to correlate the provider response with this request"
					},
					"parameters": {
						"description": "The request to start a keyboard session",
						"$ref": "#/components/schemas/KeyboardParameters"
					}
				}
			},
			"KeyboardResult": {
				"title": "KeyboardResult",
				"type": "object",
				"required": [
					"text"
				],
				"properties": {
					"text": {
						"type": "string",
						"description": "The text the user entered into the keyboard"
					},
					"canceled": {
						"type": "boolean",
						"description": "Whether the user canceled entering text before they were finished typing on the keyboard"
					}
				}
			},
			"LifecycleReadyParameters": {
				"title": "LifecycleReadyParameters",
				"type": "object",
				"required": [
					"appId"
				],
				"properties": {
					"appId": {
						"description": "The application ID",
						"type": "string"
					}
				}
			},
			"LifecycleLaunchParameters": {
				"title": "LifecycleLaunchParameters",
				"type": "object",
				"required": [
					"appId"
				],
				"properties": {
					"appId": {
						"description": "The application ID",
						"type": "string"
					},
					"intent": {
						"description": "The navigation intent to launch the app with",
						"$ref": "#/components/schemas/NavigationIntent"
					}
				}
			},
			"LifecycleLaunchResponse": {
				"title": "LifecycleLaunchResponse",
				"type": "object",
				"required": [
					"success"
				],
				"properties": {
					"success": {
						"description": "Whether the launch succeeded",
						"type": "boolean"
					}
				}
			},
			"LifecycleCloseParameters": {
				"title": "LifecycleCloseParameters",
				"type": "object",
				"required": [
					"appId",
					"reason"
				],
				"properties": {
					"appId": {
						"description": "The application ID",
						"type": "string"
					},
					"reason": {
						"description": "The close reason",
						"$ref": "#/components/schemas/CloseReason"
					}
				}
			},
			"LifecycleFinishedParameters": {
				"title": "LifecycleFinishedParameters",
				"type": "object",
				"required": [
					"appId"
				],
				"properties": {
					"appId": {
						"description": "The application ID",
						"type": "string"
					}
				}
			},
			"LifecycleReadyRequest": {
				"title": "LifecycleReadyRequest",
				"type": "object",
				"required": [
					"parameters"
				],
				"properties": {
					"parameters": {
						"description": "The associated lifecycle parameters",
						"$ref": "#/components/schemas/LifecycleReadyParameters"
					}
				}
			},
			"LifecycleLaunchRequest": {
				"title": "LifecycleLaunchRequest",
				"type": "object",
				"required": [
					"parameters"
				],
				"properties": {
					"parameters": {
						"description": "The associated launch parameters",
						"$ref": "#/components/schemas/LifecycleLaunchParameters"
					}
				}
			},
			"LifecycleCloseRequest": {
				"title": "LifecycleCloseRequest",
				"type": "object",
				"required": [
					"parameters"
				],
				"properties": {
					"parameters": {
						"description": "The associated lifecycle parameters",
						"$ref": "#/components/schemas/LifecycleCloseParameters"
					}
				}
			},
			"LifecycleFinishedRequest": {
				"title": "LifecycleFinishedRequest",
				"type": "object",
				"required": [
					"parameters"
				],
				"properties": {
					"parameters": {
						"description": "The associated lifecycle parameters",
						"$ref": "#/components/schemas/LifecycleFinishedParameters"
					}
				}
			},
			"AppSession": {
				"title": "AppSession",
				"type": "object",
				"required": [
					"app"
				],
				"properties": {
					"app": {
						"description": "Information about the application",
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The identifier for the app",
								"type": "string"
							},
							"url": {
								"description": "The url that the app will be launched with",
								"type": "string"
							},
							"title": {
								"description": "The display title of the app",
								"type": "string"
							},
							"catalog": {
								"description": "The catalog id that this app's content metadata comes from",
								"type": "string"
							}
						}
					},
					"runtime": {
						"description": "Information about the runtime that the application is running in",
						"type": "object",
						"required": [],
						"properties": {
							"id": {
								"description": "The identifier for the runtime",
								"type": "string"
							},
							"transport": {
								"description": "The type of transport the application container will use to communicate to Firebolt",
								"type": "string",
								"enum": [
									"bridge",
									"websocket"
								]
							}
						}
					},
					"launch": {
						"description": "Launch information for this app that will be loaded",
						"type": "object",
						"properties": {
							"intent": {
								"description": "The firebolt navigation intent that this app will be loaded with",
								"$ref": "#/components/schemas/NavigationIntent"
							},
							"secondScreen": {
								"description": "Any information about the app being launched from a second screen",
								"$ref": "#/components/schemas/SecondScreenEvent"
							}
						}
					}
				}
			},
			"CloseReason": {
				"title": "CloseReason",
				"description": "The application close reason",
				"type": "string",
				"enum": [
					"remoteButton",
					"userExit",
					"done",
					"error"
				]
			},
			"LifecycleState": {
				"title": "LifecycleState",
				"description": "The application lifecycle state",
				"type": "string",
				"enum": [
					"initializing",
					"inactive",
					"foreground",
					"background",
					"unloading",
					"suspended"
				]
			},
			"SecondScreenEvent": {
				"title": "SecondScreenEvent",
				"description": "An a message notification from a second screen device",
				"type": "object",
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"dial"
						]
					},
					"version": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				}
			},
			"Locality": {
				"type": "string"
			},
			"CountryCode": {
				"type": "string",
				"pattern": "^[A-Za-z]{2}$"
			},
			"Language": {
				"type": "string",
				"pattern": "^[A-Za-z]{2}$"
			},
			"Locale": {
				"type": "string",
				"pattern": "^[a-zA-Z]+([a-zA-Z0-9\\-]*)$"
			},
			"PinChallenge": {
				"title": "PinChallenge",
				"type": "object",
				"required": [
					"requestor",
					"pinSpace"
				],
				"properties": {
					"pinSpace": {
						"type": "string",
						"description": "The pin space that this challenge is for",
						"enum": [
							"purchase",
							"content"
						]
					},
					"capability": {
						"type": "string",
						"description": "The capability that is gated by a pin challenge"
					},
					"requestor": {
						"description": "The identity of which app is requesting access to this capability",
						"$ref": "#/components/schemas/ChallengeRequestor"
					}
				}
			},
			"PinChallengeProviderRequest": {
				"title": "PinChallengeProviderRequest",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProviderRequest"
					},
					{
						"type": "object",
						"required": [
							"parameters"
						],
						"properties": {
							"parameters": {
								"description": "The request to challenge the user",
								"$ref": "#/components/schemas/PinChallenge"
							}
						}
					}
				]
			},
			"ResultReason": {
				"title": "ResultReason",
				"type": "string",
				"description": "The reason for the result of challenging the user",
				"enum": [
					"noPinRequired",
					"noPinRequiredWindow",
					"exceededPinFailures",
					"correctPin",
					"cancelled"
				]
			},
			"PinChallengeResult": {
				"title": "PinChallengeResult",
				"type": "object",
				"required": [
					"granted",
					"reason"
				],
				"properties": {
					"granted": {
						"type": "boolean",
						"description": "Whether the user succeeded in the pin challenge"
					},
					"reason": {
						"$ref": "#/components/schemas/ResultReason",
						"description": "The reason for the result "
					}
				}
			},
			"PrivacySettings": {
				"title": "PrivacySettings",
				"type": "object",
				"required": [
					"allowACRCollection",
					"allowResumePoints",
					"allowAppContentAdTargeting",
					"allowCameraAnalytics",
					"allowPersonalization",
					"allowPrimaryBrowseAdTargeting",
					"allowPrimaryContentAdTargeting",
					"allowProductAnalytics",
					"allowRemoteDiagnostics",
					"allowUnentitledPersonalization",
					"allowUnentitledResumePoints",
					"allowWatchHistory"
				],
				"properties": {
					"allowACRCollection": {
						"description": "",
						"type": "boolean"
					},
					"allowResumePoints": {
						"description": "",
						"type": "boolean"
					},
					"allowAppContentAdTargeting": {
						"description": "",
						"type": "boolean"
					},
					"allowCameraAnalytics": {
						"description": "",
						"type": "boolean"
					},
					"allowPersonalization": {
						"description": "",
						"type": "boolean"
					},
					"allowPrimaryBrowseAdTargeting": {
						"description": "",
						"type": "boolean"
					},
					"allowPrimaryContentAdTargeting": {
						"description": "",
						"type": "boolean"
					},
					"allowProductAnalytics": {
						"description": "",
						"type": "boolean"
					},
					"allowRemoteDiagnostics": {
						"description": "",
						"type": "boolean"
					},
					"allowUnentitledPersonalization": {
						"description": "",
						"type": "boolean"
					},
					"allowUnentitledResumePoints": {
						"description": "",
						"type": "boolean"
					},
					"allowWatchHistory": {
						"description": "",
						"type": "boolean"
					}
				},
				"examples": [
					{
						"allowACRCollection": true,
						"allowResumePoints": false,
						"allowAppContentAdTargeting": false,
						"allowCameraAnalytics": true,
						"allowPersonalization": true,
						"allowPrimaryBrowseAdTargeting": false,
						"allowPrimaryContentAdTargeting": false,
						"allowProductAnalytics": true,
						"allowRemoteDiagnostics": true,
						"allowUnentitledPersonalization": true,
						"allowUnentitledResumePoints": false,
						"allowWatchHistory": true
					}
				]
			},
			"GrantInfo": {
				"description": "Information about a grant given by a user",
				"type": "object",
				"properties": {
					"app": {
						"$ref": "#/components/schemas/AppInfo"
					},
					"state": {
						"$ref": "#/components/schemas/GrantState"
					},
					"capability": {
						"$ref": "#/components/schemas/Capability"
					},
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"lifespan": {
						"type": "string",
						"enum": [
							"once",
							"forever",
							"appActive",
							"powerActive",
							"seconds"
						]
					},
					"expires": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false,
				"required": [
					"state",
					"capability",
					"role",
					"lifespan"
				],
				"examples": [
					{
						"app": {
							"id": "certapp",
							"title": "Firebolt Certification"
						},
						"state": "granted",
						"capability": "xrn:firebolt:capability:data:app-usage",
						"role": "use",
						"lifespan": "seconds",
						"expires": "2022-12-14T20:20:39+00:00"
					}
				]
			},
			"AppInfo": {
				"description": "Information about an app that a grant was for",
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"title": {
						"type": "string"
					}
				},
				"additionalProperties": false,
				"required": [
					"id"
				]
			},
			"GrantState": {
				"description": "The state the grant is in",
				"type": "string",
				"enum": [
					"granted",
					"denied"
				]
			},
			"GrantModificationOptions": {
				"description": "Options when modifying any grant",
				"type": "object",
				"properties": {
					"appId": {
						"type": "string"
					}
				},
				"additionalProperties": false,
				"required": []
			},
			"VoiceSpeed": {
				"title": "VoiceSpeed",
				"type": "number"
			},
			"AccessPointList": {
				"title": "AccessPointList",
				"type": "object",
				"description": "List of scanned Wifi networks available near the device.",
				"properties": {
					"list": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AccessPoint"
						}
					}
				}
			},
			"WifiSecurityMode": {
				"title": "WifiSecurityMode",
				"description": "Security Mode supported for Wifi",
				"type": "string",
				"enum": [
					"none",
					"wep64",
					"wep128",
					"wpaPskTkip",
					"wpaPskAes",
					"wpa2PskTkip",
					"wpa2PskAes",
					"wpaEnterpriseTkip",
					"wpaEnterpriseAes",
					"wpa2EnterpriseTkip",
					"wpa2EnterpriseAes",
					"wpa2Psk",
					"wpa2Enterprise",
					"wpa3PskAes",
					"wpa3Sae"
				]
			},
			"WifiSignalStrength": {
				"title": "WifiSignalStrength",
				"description": "Strength of Wifi signal, value is negative based on RSSI specification.",
				"type": "integer",
				"default": -255,
				"minimum": -255,
				"maximum": 0
			},
			"WifiFrequency": {
				"title": "WifiFrequency",
				"description": "Wifi Frequency in Ghz, example 2.4Ghz and 5Ghz.",
				"type": "number",
				"default": 0,
				"minimum": 0
			},
			"AccessPoint": {
				"title": "AccessPoint",
				"description": "Properties of a scanned wifi list item.",
				"type": "object",
				"properties": {
					"ssid": {
						"type": "string",
						"description": "Name of the wifi."
					},
					"securityMode": {
						"$ref": "#/components/schemas/WifiSecurityMode"
					},
					"signalStrength": {
						"$ref": "#/components/schemas/WifiSignalStrength"
					},
					"frequency": {
						"$ref": "#/components/schemas/WifiFrequency"
					}
				}
			},
			"WPSSecurityPin": {
				"title": "WPSSecurityPin",
				"description": "Security pin type for WPS(Wifi Protected Setup).",
				"type": "string",
				"enum": [
					"pushButton",
					"pin",
					"manufacturerPin"
				]
			},
			"Timeout": {
				"title": "Timeout",
				"description": "Defines the timeout in seconds. If the threshold for timeout is passed for any operation without a result it will throw an error.",
				"type": "integer",
				"default": 0,
				"minimum": 0,
				"maximum": 9999
			}
		}
	}
}